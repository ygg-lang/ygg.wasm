package peg: core;

world host {
  export cst;
  export visitor;
  export listener;
}

interface types {
  record text-range {
    head-offset: u32,
    tail-offset: u32,
  }
}

interface cst {
  use types.{text-range};

  resource syntax-rule {

  }

  resource syntax-node {
    is-leaf: func() -> bool;
    get-hash: func() -> u64;
    get-range: func() -> text-range;
    get-rule: func() -> syntax-rule;
    get-text: func() -> list<string>;
    get-parent: func() -> option<syntax-iterator>;
    get-ancestors: func(include-self: bool) -> syntax-iterator;
    get-last: func() -> option<cst-node>;
    get-last-iterator: func(include-self: bool) -> syntax-iterator;
    get-next: func() -> option<cst-node>;
    get-next-iterator: func(include-self: bool) -> syntax-iterator;
    get-siblings: func() -> syntax-iterator;
    get-children: func() -> syntax-iterator;
    get-descendants: func(depth-first: bool) -> syntax-iterator;
  }

  resource syntax-iterator {
    last: func() -> option<syntax-node>;
    next: func() -> option<syntax-node>;
    move-head: func();
    move-tail: func();
    skip: func(count: u32);
    reverse: func();
  }
}

interface ast {

}

interface visitor {

}

interface listener {

}
